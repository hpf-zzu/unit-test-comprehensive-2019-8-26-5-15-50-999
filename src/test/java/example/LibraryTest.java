package example;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.*;
import sun.awt.X11.XInputMethod;
import tw.commands.GuessInputCommand;

import java.util.LinkedList;
import java.util.List;

import static java.time.Duration.ofMillis;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@DisplayName("A special tests collection for junit and mockito")
class LibraryTest {

    @BeforeAll
    static void initTestEnv() {
    }

    @BeforeEach
    void initEveryMethod() {
    }

    @Test
    @DisplayName("someLibraryMethod should return 'true'")
    void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        Assertions.assertTrue(classUnderTest.someLibraryMethod());
    }

    @Test
    @SuppressWarnings("unchecked")
    void testMockClass() throws Exception {
        // you can mock concrete classes, not only interfaces
        LinkedList mockedList = mock(LinkedList.class);

        // stubbing appears before the actual execution
        String value = "first";
        when(mockedList.get(0)).thenReturn(value);

        Assertions.assertEquals(value, mockedList.get(0));
    }

    @Test
    @SuppressWarnings("unchecked")
    void test_mock_verify() {
        // mock creation
        List<String> mockedList = mock(List.class);
        // using mock object - it does not throw any "unexpected interaction" exception
        mockedList.add("one");
        mockedList.clear();
        // selective, explicit, highly readable verification
        verify(mockedList).add("one");
        verify(mockedList).clear();
    }

    @Test
    void groupedAssertions() {
        // In a grouped assertion all assertions are executed, and any
        // failures will be reported together.
        String firstName = "John";
        String lastName = "Doe";

        assertAll("person",
                () -> assertEquals("John", firstName),
                () -> assertEquals("Doe", lastName)
        );
    }

    @Test
    void exceptionTesting() {
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
            throw new IllegalArgumentException("a message");
        });
        Assertions.assertEquals("a message", exception.getMessage());
    }

    @Test
    @Disabled
    void timeoutExceeded() {
        // The following assertion fails with an error message similar to:
        // execution exceeded timeout of 10 ms by 91 ms
        assertTimeout(ofMillis(10), () -> {
            // Simulate task that takes more than 10 ms.
            Thread.sleep(100);
        });
    }
    @Test
    public void should_print_array(){
        //given
        String inputString = "1234";
        //when
        int[] input = new GuessInputCommand().toArray(inputString);
        //then
        Assertions.assertEquals(input[0], 1);
        Assertions.assertEquals(input[1], 2);
        Assertions.assertEquals(input[2], 3);
        Assertions.assertEquals(input[3], 4);
    }
    @Test
    public void should_get_Anumber(){
        //given
        int[] array = {1,2,3,4};
        int[] answer = {5,2,3,1};
        //when
        int num = new GuessInputCommand().getSameAnumber(array,answer);
        //then
        Assertions.assertEquals(num,2);
    }
    @Test
    public void should_get_Bnumber(){
        //given
        int[] array = {1,2,3,4};
        int[] answer = {5,2,3,1};
        //when
        int num = new GuessInputCommand().getSameBnumber(new GuessInputCommand().getSameCount(array,answer)
                ,new GuessInputCommand().getSameAnumber(array,answer));
        //then
        Assertions.assertEquals(num,1);
    }
    @Test
    public void should_print(int count1 , int count2){

        Assertions.assertSame(new GuessInputCommand().printAnswer(count1,count2),"2A1B");



    }
}
